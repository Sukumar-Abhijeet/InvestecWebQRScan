{"code":"/**\r\n * pdf-image-qr-scanner\r\n * Library to scan user-uploaded PDF's or images locally and reliably for QR codes using jsQR.\r\n * @since 0.0.0\r\n */\r\nimport jsQR from 'jsqr';\r\nimport pdfLib from 'pdfjs-dist';\r\nconst { getDocument, GlobalWorkerOptions, version: pdfjsVersion } = pdfLib;\r\nGlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsVersion}/pdf.worker.min.js`;\r\n/**\r\n * Scan PDF file and return QR code data.\r\n *\r\n * @param {File} FileHandle - File handle of the PDF/Image file to scan.\r\n * @returns {Promise<string?>} QR Code Data.\r\n * @since 0.0.0\r\n */\r\nexport async function scanFile(FileHandle) {\r\n    // async read of selected PDF file\r\n    const uploadedFile = new Response(FileHandle);\r\n    if (FileHandle.type === 'application/pdf') {\r\n        // PDF.js is used to parse the PDF file from the typed array.\r\n        const pdfTypedArray = new Uint8Array(await uploadedFile.arrayBuffer());\r\n        const loadedPDF = await getDocument(pdfTypedArray).promise;\r\n        return await renderPDF(loadedPDF);\r\n    }\r\n    else {\r\n        // It's an image, so we use the canvas to render the image.\r\n        const imageBlob = await uploadedFile.blob();\r\n        return await renderImage(imageBlob);\r\n    }\r\n}\r\n/**\r\n * Render PDF to canvas, and scans the QR code using the Canvas data.\r\n * @param {PDFDocumentProxy} pdfData PDF data to be scanned.\r\n * @return {string?} QR code data.\r\n * @since 0.0.0\r\n */\r\nasync function renderPDF(pdfTypedArray) {\r\n    let qrResult = null;\r\n    for (let pageToRender = 1; pageToRender <= pdfTypedArray.numPages; pageToRender++) {\r\n        const page = await pdfTypedArray.getPage(pageToRender);\r\n        const canvas = document.createElement('canvas');\r\n        // Simulation of A4 at 300dpi resolution\r\n        canvas.height = 3508;\r\n        canvas.width = 2480;\r\n        const unscaledViewport = page.getViewport({ scale: 1 });\r\n        const scale = Math.min(canvas.height / unscaledViewport.height, canvas.width / unscaledViewport.width);\r\n        const viewport = page.getViewport({ scale });\r\n        const renderContext = {\r\n            canvasContext: canvas.getContext('2d'),\r\n            viewport: viewport,\r\n        };\r\n        await page.render(renderContext).promise;\r\n        // PDF Page is now fully rendered to canvas, so we can now extract the QR code.\r\n        qrResult = extractQRCode(canvas);\r\n        if (qrResult !== null) {\r\n            return qrResult;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Wrapper for new Image() to load image from blob.\r\n * Needed to make it compatible with Async/Await.\r\n * @param {Blob} imageBlob\r\n * @returns {Promise<Image>}\r\n * @since 0.0.0\r\n */\r\nasync function generateImageObject(imageBlob) {\r\n    return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.onload = () => resolve(image);\r\n        image.onerror = reject;\r\n        image.src = URL.createObjectURL(imageBlob);\r\n    });\r\n}\r\n/**\r\n * Takes image file, creates Image, then renders it on a canvas, and finally extracts the QRCode data\r\n * @param {Blob} imageBlob\r\n * @return {string?} QR code data.\r\n * @since 0.0.0\r\n */\r\nasync function renderImage(imageBlob) {\r\n    const image = await generateImageObject(imageBlob);\r\n    const canvas = document.createElement('canvas');\r\n    // Try scanning for multiple scales, helps jsQR to find the QR code.\r\n    for (const scale of [0.5, 1, 0.25]) {\r\n        canvas.height = image.height * scale;\r\n        canvas.width = image.width * scale;\r\n        const context = canvas.getContext('2d');\r\n        context.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n        const result = extractQRCode(canvas);\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Extracts QR code from canvas.\r\n * @param {HTMLCanvasElement} canvas Canvas element to extract QR code from.\r\n * @return {string?} QR code data.\r\n * @since 0.0.0\r\n */\r\nfunction extractQRCode(canvas) {\r\n    const ctx = canvas.getContext('2d');\r\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n    const qrData = jsQR(imageData.data, canvas.width, canvas.height, {\r\n        inversionAttempts: 'attemptBoth',\r\n    });\r\n    return qrData?.data || null;\r\n}\r\n//# sourceMappingURL=index.js.map","references":["/Users/sukumar.sahoo/DCode/pdf-image-qr-scanner/node_modules/jsqr/dist/index.d.ts","/Users/sukumar.sahoo/DCode/pdf-image-qr-scanner/node_modules/pdfjs-dist/types/src/pdf.d.ts","/Users/sukumar.sahoo/DCode/pdf-image-qr-scanner/node_modules/pdfjs-dist/types/src/pdf.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"/Users/sukumar.sahoo/DCode/pdf-image-qr-scanner/dist/src/index.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"index.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG;AAQH;;;;;;GAMG;AAEH,wBAAsB,QAAQ,CAAC,UAAU,EAAE,IAAI,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,CAevE\"}"},"dts":{"name":"/Users/sukumar.sahoo/DCode/pdf-image-qr-scanner/dist/src/index.d.ts","writeByteOrderMark":false,"text":"/**\r\n * pdf-image-qr-scanner\r\n * Library to scan user-uploaded PDF's or images locally and reliably for QR codes using jsQR.\r\n * @since 0.0.0\r\n */\r\n/**\r\n * Scan PDF file and return QR code data.\r\n *\r\n * @param {File} FileHandle - File handle of the PDF/Image file to scan.\r\n * @returns {Promise<string?>} QR Code Data.\r\n * @since 0.0.0\r\n */\r\nexport declare function scanFile(FileHandle: File): Promise<string | null>;\r\n//# sourceMappingURL=index.d.ts.map"}}

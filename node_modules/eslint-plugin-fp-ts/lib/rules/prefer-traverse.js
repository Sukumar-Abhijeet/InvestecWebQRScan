"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var function_1 = require("fp-ts/function");
var fp_ts_1 = require("fp-ts");
var utils_1 = require("../utils");
exports.default = utils_1.createRule({
    name: "prefer-traverse",
    meta: {
        type: "suggestion",
        fixable: "code",
        hasSuggestions: true,
        schema: [],
        docs: {
            description: "Replace map + sequence with traverse",
            recommended: "warn",
        },
        messages: {
            mapSequenceIsTraverse: "map followed by sequence can be replaced by traverse",
            replaceMapSequenceWithTraverse: "replace map and sequence with traverse",
        },
    },
    defaultOptions: [],
    create: function (context) {
        var isPipeOrFlowExpression = utils_1.contextUtils(context).isPipeOrFlowExpression;
        return {
            CallExpression: function (node) {
                function_1.pipe(node, isPipeOrFlowExpression, fp_ts_1.boolean.fold(function_1.constVoid, function () {
                    return function_1.pipe(utils_1.getAdjacentCombinators(node, {
                        name: /map|mapWithIndex/,
                        types: [experimental_utils_1.AST_NODE_TYPES.CallExpression],
                    }, {
                        name: "sequence",
                        types: [experimental_utils_1.AST_NODE_TYPES.CallExpression],
                    }, true), fp_ts_1.option.bindTo("combinators"), fp_ts_1.option.bind("mapCalleeIdentifier", function (_a) {
                        var mapNode = _a.combinators[0];
                        return utils_1.calleeIdentifier(mapNode);
                    }), fp_ts_1.option.map(function (_a) {
                        var _b = _a.combinators, mapNode = _b[0], sequenceNode = _b[1], mapCalleeIdentifier = _a.mapCalleeIdentifier;
                        var traverseIdentifier = mapCalleeIdentifier.name === "mapWithIndex"
                            ? "traverseWithIndex"
                            : "traverse";
                        context.report({
                            loc: {
                                start: mapNode.loc.start,
                                end: sequenceNode.loc.end,
                            },
                            messageId: "mapSequenceIsTraverse",
                            suggest: [
                                {
                                    messageId: "replaceMapSequenceWithTraverse",
                                    fix: function (fixer) {
                                        return [
                                            fixer.remove(sequenceNode),
                                            fixer.removeRange([
                                                mapNode.range[1],
                                                sequenceNode.range[0],
                                            ]),
                                            fixer.replaceText(mapCalleeIdentifier, traverseIdentifier),
                                            fixer.insertTextAfter(mapNode.callee, "(" + utils_1.prettyPrint(sequenceNode.arguments[0]) + ")"),
                                        ];
                                    },
                                },
                            ],
                        });
                    }));
                }));
            },
        };
    },
});

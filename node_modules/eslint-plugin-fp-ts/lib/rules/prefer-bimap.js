"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var fp_ts_1 = require("fp-ts");
var function_1 = require("fp-ts/function");
var utils_1 = require("../utils");
exports.default = utils_1.createRule({
    name: "prefer-bimap",
    meta: {
        type: "suggestion",
        fixable: "code",
        hasSuggestions: true,
        schema: [],
        docs: {
            description: "Replace map + mapLeft with bimap",
            recommended: "warn",
        },
        messages: {
            mapMapLeftIsBimap: "{{firstNode}} followed by {{secondNode}} can be replaced by bimap",
            replaceMapMapLeftBimap: "replace {{firstNode}} and {{secondNode}} with bimap",
        },
    },
    defaultOptions: [],
    create: function (context) {
        var isPipeOrFlowExpression = utils_1.contextUtils(context).isPipeOrFlowExpression;
        return {
            CallExpression: function (node) {
                var mapThenMapLeft = function () {
                    return utils_1.getAdjacentCombinators(node, {
                        name: "map",
                        types: [experimental_utils_1.AST_NODE_TYPES.CallExpression],
                    }, {
                        name: "mapLeft",
                        types: [experimental_utils_1.AST_NODE_TYPES.CallExpression],
                    }, true);
                };
                var mapLeftThenMap = function () {
                    return utils_1.getAdjacentCombinators(node, {
                        name: "mapLeft",
                        types: [experimental_utils_1.AST_NODE_TYPES.CallExpression],
                    }, {
                        name: "map",
                        types: [experimental_utils_1.AST_NODE_TYPES.CallExpression],
                    }, true);
                };
                function_1.pipe(node, isPipeOrFlowExpression, fp_ts_1.boolean.fold(function_1.constVoid, function () {
                    return function_1.pipe(mapThenMapLeft(), fp_ts_1.option.alt(mapLeftThenMap), fp_ts_1.option.bindTo("combinators"), fp_ts_1.option.bind("calleeIdentifiers", function (_a) {
                        var combinators = _a.combinators;
                        return fp_ts_1.apply.sequenceT(fp_ts_1.option.option)(utils_1.calleeIdentifier(combinators[0]), utils_1.calleeIdentifier(combinators[1]));
                    }), fp_ts_1.option.map(function (_a) {
                        var combinators = _a.combinators, calleeIdentifiers = _a.calleeIdentifiers;
                        context.report({
                            loc: {
                                start: combinators[0].loc.start,
                                end: combinators[1].loc.end,
                            },
                            messageId: "mapMapLeftIsBimap",
                            data: {
                                firstNode: calleeIdentifiers[0].name,
                                secondNode: calleeIdentifiers[1].name,
                            },
                            suggest: [
                                {
                                    messageId: "replaceMapMapLeftBimap",
                                    data: {
                                        firstNode: calleeIdentifiers[0].name,
                                        secondNode: calleeIdentifiers[1].name,
                                    },
                                    fix: function (fixer) {
                                        var mapFirst = calleeIdentifiers[0].name === "map";
                                        var mapNode = mapFirst
                                            ? combinators[0]
                                            : combinators[1];
                                        var mapLeftNode = mapFirst
                                            ? combinators[1]
                                            : combinators[0];
                                        return [
                                            fixer.replaceTextRange([combinators[0].range[0], combinators[1].range[1]], utils_1.prettyPrint(mapNode.callee).replace(/map$/, "bimap") + "(\n" + utils_1.inferIndent(mapNode) + "  " + utils_1.prettyPrint(mapLeftNode.arguments[0]) + ",\n" + utils_1.inferIndent(mapNode) + "  " + utils_1.prettyPrint(mapNode.arguments[0]) + "\n" + utils_1.inferIndent(mapNode) + ")"),
                                        ];
                                    },
                                },
                            ],
                        });
                    }));
                }));
            },
        };
    },
});
